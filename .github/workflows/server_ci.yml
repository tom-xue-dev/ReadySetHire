name: Server CI/CD Pipeline

on:
  workflow_call:
    secrets:
      SNYK_TOKEN:
        required: false

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

defaults:
  run:
    working-directory: server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: readysethire_user
          POSTGRES_PASSWORD: readysethire_password
          POSTGRES_DB: readysethire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'server/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public

    - name: Seed database
      run: npx tsx src/db/seed.ts
      env:
        DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test

    - name: Run integration tests  
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public
        TEST_DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public
        NODE_ENV: test

    - name: Generate coverage report
      run: npm run test:ci
      env:
        DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public
        TEST_DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: server/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'server/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: server/dist/

  docker:
    name: Build Docker Image (Local)
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: server
        push: false
        tags: readysethire-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "Docker image built successfully!"
        docker images | grep readysethire-backend

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'server/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'server/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: false

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Using build artifacts for deployment..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or other deployment methods

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: false

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Using build artifacts for deployment..."
        # Add your production deployment commands here
        # Example: rsync, scp, or other deployment methods

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      working-directory: .
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      working-directory: .
      run: |
        echo "❌ Build or tests failed. Please check the logs."
