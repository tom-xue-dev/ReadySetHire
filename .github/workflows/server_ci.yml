name: Server CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch: {}

jobs:
  unit:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: server } }
    strategy:
      matrix: { node-version: [22.x] }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: server/package-lock.json
      - run: npm ci
      - run: npm run db:generate
      - run: npm run test:unit


  integration:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: server } }

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: readysethire
          POSTGRES_USER: readysethire_user
          POSTGRES_PASSWORD: readysethire_password
          POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        ports: 
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U readysethire_user -d readysethire"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire?schema=public
      TEST_DATABASE_URL: postgresql://readysethire_user:readysethire_password@localhost:5432/readysethire_test?schema=public

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: server/package-lock.json
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Wait for PostgreSQL readiness
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if PGPASSWORD=readysethire_password psql -h localhost -U readysethire_user -d readysethire -c "SELECT 1" >/dev/null 2>&1; then
              echo "PostgreSQL is ready."
              break
            fi
            echo "PostgreSQL not ready yet... ($i)" && sleep 2
          done
          PGPASSWORD=readysethire_password psql -h localhost -U readysethire_user -d readysethire -c "SELECT 1" >/dev/null 2>&1 || (echo "Database failed to start" && exit 1)
      - run: npm ci
      - run: npx prisma generate
      - name: Ensure test database exists
        run: |
          PGPASSWORD=readysethire_password psql -h localhost -U readysethire_user -d readysethire -tc "SELECT 1 FROM pg_database WHERE datname='readysethire_test'" | grep -q 1 || \
          PGPASSWORD=readysethire_password createdb -h localhost -U readysethire_user readysethire_test
      - name: Run migrations against test database
        run: npx prisma migrate deploy
      - run: npm run test:integration

  build:
    runs-on: ubuntu-latest
    needs: [unit, integration]
    defaults: { run: { working-directory: server } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: server/package-lock.json
      - run: npm ci
      - run: npm run db:generate
      - run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-dist
          path: server/dist
